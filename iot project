#include<SPI.h>
#include<Ethernet.h>


#define trigPin11 2
#define echoPin11 3
#define trigPin12 5
#define echoPin12 4
#define trigPin13 7
#define echoPin13 6
#define trigPin14 8
#define echoPin14 9
#define echoPin21 30
#define trigPin21 31
#define echoPin22 32
#define trigPin22 33
#define echoPin23 28
#define trigPin23 29
#define echoPin24 26
#define trigPin24 27
#define g1 34
#define y1 35
#define r1 36
#define g2 37
#define y2 38
#define r2 39
#define g3 40
#define y3 41
#define r3 42
#define g4 43
#define y4 44
#define r4 45

// BehindTheSciences.com
int timerg[4];

byte mac[] = {0xD4, 0x28, 0xB2, 0xFF, 0xA0, 0xA1};
char thingSpeakAddress[] = "api.thingspeak.com";
String writeAPIkey = "6A3KRE3YH8X6096R";
const int updateThingSpeakInterval = 16;
long lastConnectionTime = 0;
int failedCounter = 0;

EthernetClient client;

void sensor(int echo1, int trig1, int echo2,int trig2,int x)
{
  long duration1,duration2, distance1,distance2;
  digitalWrite(trig1, LOW);  // Set trigger Pin to Low
  delayMicroseconds(2); // Delay for 2 microseconds
  digitalWrite(trig1, HIGH); // Set trigger Pin to Low
  delayMicroseconds(10);
  digitalWrite(trig1, LOW);
 
  digitalWrite(trig2, LOW);  // Set trigger Pin to Low
  delayMicroseconds(2); // Delay for 2 microseconds
  digitalWrite(trig2, HIGH); // Set trigger Pin to Low
  delayMicroseconds(10);
  digitalWrite(trig2, LOW);

  duration1 = pulseIn(echo1, HIGH);
  distance1 = ((duration1 / 2) / 29.1);
  Serial.println(distance1);
  if (distance1 > 1 && distance1 <= 6)
  {
    timerg[x]+= 3000;
  }
  duration2 = pulseIn(echo2, HIGH);
  distance2 = ((duration2 / 2) / 29.1);
  Serial.println(distance2);
  if (distance2 > 1 && distance2 <= 6)
  {
    timerg[x]+= 3000;
  }
 
}

void lights(){  

sensor(echoPin12,trigPin12,echoPin11,trigPin11,0);
digitalWrite(g1,LOW);
digitalWrite(y1,HIGH);
digitalWrite(r1,LOW);

digitalWrite(g2,LOW);
digitalWrite(y2,LOW);
digitalWrite(r2,HIGH);

digitalWrite(g3,LOW);
digitalWrite(y3,LOW);
digitalWrite(r3,HIGH);

digitalWrite(g4,LOW);
digitalWrite(y4,LOW);
digitalWrite(r4,HIGH);

delay(1000);

digitalWrite(g1,HIGH);
digitalWrite(y1,LOW);
digitalWrite(r1,LOW);

digitalWrite(g2,LOW);
digitalWrite(y2,LOW);
digitalWrite(r2,HIGH);

digitalWrite(g3,LOW);
digitalWrite(y3,LOW);
digitalWrite(r3,HIGH);

digitalWrite(g4,LOW);
digitalWrite(y4,LOW);
digitalWrite(r4,HIGH);

delay(timerg[0]);


sensor(echoPin13,trigPin13,echoPin14,trigPin14,1);
digitalWrite(g2,LOW);
digitalWrite(y2,HIGH);
digitalWrite(r2,LOW);

digitalWrite(g1,LOW);
digitalWrite(y1,LOW);
digitalWrite(r1,HIGH);

digitalWrite(g3,LOW);
digitalWrite(y3,LOW);
digitalWrite(r3,HIGH);

digitalWrite(g4,LOW);
digitalWrite(y4,LOW);
digitalWrite(r4,HIGH);

delay(1000);

digitalWrite(g2,HIGH);
digitalWrite(y2,LOW);
digitalWrite(r2,LOW);

digitalWrite(g1,LOW);
digitalWrite(y1,LOW);
digitalWrite(r1,HIGH);

digitalWrite(g3,LOW);
digitalWrite(y3,LOW);
digitalWrite(r3,HIGH);

digitalWrite(g4,LOW);
digitalWrite(y4,LOW);
digitalWrite(r4,HIGH);

delay(timerg[1]);

sensor(echoPin21,trigPin21,echoPin22,trigPin22,0);
digitalWrite(g3,LOW);
digitalWrite(y3,HIGH);
digitalWrite(r3,LOW);

digitalWrite(g2,LOW);
digitalWrite(y2,LOW);
digitalWrite(r2,HIGH);

digitalWrite(g1,LOW);
digitalWrite(y1,LOW);
digitalWrite(r1,HIGH);

digitalWrite(g4,LOW);
digitalWrite(y4,LOW);
digitalWrite(r4,HIGH);

delay(1000);

digitalWrite(g3,HIGH);
digitalWrite(y3,LOW);
digitalWrite(r3,LOW);

digitalWrite(g2,LOW);
digitalWrite(y2,LOW);
digitalWrite(r2,HIGH);

digitalWrite(g1,LOW);
digitalWrite(y1,LOW);
digitalWrite(r1,HIGH);

digitalWrite(g4,LOW);
digitalWrite(y4,LOW);
digitalWrite(r4,HIGH);

delay(timerg[2]);

sensor(echoPin23,trigPin23,echoPin24,trigPin24,3);
digitalWrite(g4,LOW);
digitalWrite(y4,HIGH);
digitalWrite(r4,LOW);

digitalWrite(g2,LOW);
digitalWrite(y2,LOW);
digitalWrite(r2,HIGH);

digitalWrite(g3,LOW);
digitalWrite(y3,LOW);
digitalWrite(r3,HIGH);

digitalWrite(g1,LOW);
digitalWrite(y1,LOW);
digitalWrite(r1,HIGH);

delay(1000);

digitalWrite(g4,HIGH);
digitalWrite(y4,LOW);
digitalWrite(r4,LOW);

digitalWrite(g2,LOW);
digitalWrite(y2,LOW);
digitalWrite(r2,HIGH);

digitalWrite(g3,LOW);
digitalWrite(y3,LOW);
digitalWrite(r3,HIGH);

digitalWrite(g1,LOW);
digitalWrite(y1,LOW);
digitalWrite(r1,HIGH);

delay(timerg[3]);

}


void startEthernet(){
  client.stop();
  delay(1000);

  if(ethernet.begin(mac) == 0)
  {
     Serial.println("DHCP Failed, reset arduino to try again");
     Serial.println();
  }
  else
  {}
  delay(1000);
 
}

void setup() {

  Serial.begin (9600);
  pinMode(trigPin11, OUTPUT);
  pinMode(echoPin11, INPUT);
  pinMode(trigPin12, OUTPUT);
  pinMode(echoPin12, INPUT);
  pinMode(trigPin13, OUTPUT);
  pinMode(echoPin13, INPUT);
  pinMode(trigPin14, OUTPUT);
  pinMode(echoPin14, INPUT);
  pinMode(trigPin21, OUTPUT);
  pinMode(echoPin21, INPUT);
  pinMode(trigPin22, OUTPUT);
  pinMode(echoPin22, INPUT);
  pinMode(trigPin23, OUTPUT);
  pinMode(echoPin23, INPUT);
  pinMode(trigPin24, OUTPUT);
  pinMode(echoPin24, INPUT);
  pinMode(g1, OUTPUT);
  pinMode(y1, OUTPUT);
  pinMode(r1, OUTPUT);
   pinMode(g2, OUTPUT);
  pinMode(y2, OUTPUT);
  pinMode(r2, OUTPUT);
   pinMode(g3, OUTPUT);
  pinMode(y3, OUTPUT);
  pinMode(r3, OUTPUT);
   pinMode(g4, OUTPUT);
  pinMode(y4, OUTPUT);
  pinMode(r4, OUTPUT);
 

}



void loop() {
  for(int i=0;i<4;i++)
  timerg[i]=3000;
  lights();
}
